/*
* Hanaia Finch
* 11/28/23
* CSE 121
* C3: Dance Dance Arrayvolution
*/
//This class emulates a dance, dance, revolution game by printing direction emojis and 
//taking user input to calculate score. It then prints a closing message along with 
//the game stats.
import java.util.*;
public class DDA {

    public static final String[] ACTIONS = {"⬆️", "➡️", "⬇️", "⬅️", "⏫"};
    public static final String[] RESPONSES = {"UP", "RIGHT", "DOWN", "LEFT", "JUMP"};
    public static final String STAR = "⭐";

    public static void main(String[] args){
        Scanner console = new Scanner(System.in);
        Random r = new Random();
        System.out.println("Welcome to Dance Dance Arrayvolution!");
        System.out.println();
        showActions();
        String[] names = nameList(console);
        int gameLoop = 0;
        double highScore = 0;
        String highScoreWinner = "";
        String[] moves = makeMoves(console, r);
        String playerName = names[gameLoop];
        System.out.println("Round 1: " + playerName + " is up!");
        double score = playGame(console, moves);
        endScreen(score, moves.length, playerName);
        System.out.println();
        gameLoop++;
        if(score > highScore){
            highScore = score;
            highScoreWinner = playerName;
        }
        while(gameLoop < names.length){
            playerName = names[gameLoop];
            System.out.println("Round 1: " + playerName + " is up!");
            score = playGame(console, moves);
            endScreen(score, moves.length, playerName);
            System.out.println();
            gameLoop++;
            if(score > highScore){
                highScore = score;
                highScoreWinner = playerName;
            }
        }
        System.out.println("The top scorer is... ");
        System.out.println(highScoreWinner + "! with a highscore of: " +
                            highScore + "!");
        System.out.println();
        System.out.println("Thanks for playing!");

    }
// Behavior: 
//   -This method prints the possible actions from the ACTIONS array
//    and the corresponding responses in the RESPONSES array 
//    by iterating through the respective arrays via for-loop 
    public static void showActions(){
        System.out.println("These are the possible actions and their correct responses:");
        for(int i = 0; i < ACTIONS.length; i++){
            System.out.println(ACTIONS[i] + ": " + RESPONSES[i]);
        }
        System.out.println();
    }

// Behavior: 
//   -This method prompts the user for the number of players and their names
//   then creates an array of that size
// Parameters:
//   console: A scanner object used to take in number of players and their names
// Returns:
//   - names: the array of players names. You can also use the array to determine how many
//   time the game needs to run to accomodate number of players
    public static String[] nameList(Scanner console){
        int numNames = 0;
        System.out.print("How many players are there? ");
        int numPlayers = console.nextInt();
        String[] names = new String[numPlayers];
        for(int i = 0; i < numPlayers; i++){
            System.out.print("Player " + (i + 1) + " name: ");
            names[i] = console.next();
            System.out.println();
        }
        return names;
    }

// Behavior: 
//   -This method creates an array based on user input in relation to the ACTIONS array
// Parameters:
//   - console: takes in user input which determines how many moves the player makes
//   - r: a random object used to generate random moves the user can play
// Returns:
//   - nextMove: A string array that contains a random sequence of ACTIONS   
    public static String[] makeMoves(Scanner console, Random r){
        int numMoves = 0;
        int randomNum = 0;
        System.out.print("How many moves would you like to play? ");
        numMoves = console.nextInt();
        System.out.println();
        System.out.println("Let's Dance!");
        System.out.println();
        String[] nextMove = new String[numMoves];
        for(int i = 0; i < numMoves; i++){
            randomNum = r.nextInt(ACTIONS.length);
            nextMove[i] = ACTIONS[randomNum];
        }
        return nextMove;

    }

// Behavior: 
//   -This method runs the game loop that continues for the duration of makeMoves
// Parameters:
//   - console: takes in the usesrs input from the console for testing correct answers
//   - makeMoves: an array variable uses to determine how long to run the loop
// Returns:
//   - gameScore: The score the player received for the iteration of the game
    public static double playGame(Scanner console, String[] makeMoves){
        int i = 0;
        int moveCount = 1;
        double gameScore = 0;
        while(i <= makeMoves.length - 1){
            System.out.print("(" + moveCount + ") " + makeMoves[i] + ": ");
            String input = console.next();
            
            String move = makeMoves[i];
            gameScore += correctInput(input,move);
            moveCount++;
            i++;
        }
        return gameScore;
    }

// Behavior: 
//   - This method calculates net profit or loss based on monthly income and daily spending.
// Parameters:
//   - input: Takes a string that gets tested against the expected RESPONSE array element
//   - movement: takes a string that then gets tested to see if it's in the ACTIONS array
// Returns:
//   - num: the number to get added to the players score in the playGame method 
    public static double correctInput(String input, String movement){
        int movementPlace = 0;
        double num = 0;
        for(int i = 0; i < ACTIONS.length; i++){
            if(ACTIONS[i] == movement){ 
                movementPlace = i;
                if(input.equalsIgnoreCase(RESPONSES[movementPlace])){
                    num += 1;
                }else if(input.toUpperCase().contains(RESPONSES[movementPlace].toUpperCase())){
                    num += 0.5;
                }
            }
        }
        return num;
    }

// Behavior: 
//   - This method prints a concluding message and includes the score the player recieved
//   and prints stars according to the accuracy percentage.
// Parameters:
//   - score: the player's score from the interation of the game
//   - maxScore: the maximum score the player can receive from the interation
    public static void endScreen(double score, int maxScore, String playerName){
        double percentage = (score/ maxScore) * 100;
        int numStars = 1;
        if(percentage > 20){
            numStars = (int)(percentage / 20);
        }
        System.out.print(playerName + "'s score: ");
        for(int i = 1; i <= numStars; i++){
            System.out.print(STAR);
        }
        System.out.println(" (" + score + "/" + (double)maxScore+ ")");
        if(numStars == 5){
            System.out.println("Perfect Score!");
        }else if(numStars == 1){
            System.out.println("Try harder!");
        }else {
            System.out.println("Great Dancing!");
        }
    }

}
